"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxiosClient = void 0;
const axios_1 = __importStar(require("axios"));
const sdkError_1 = require("../errors/sdkError");
const types_1 = require("./types");
const fast_xml_parser_1 = require("fast-xml-parser");
;
const defaultAxiosConfig = {
    maxContentLength: Infinity,
    maxBodyLength: Infinity,
    responseType: 'json',
};
class AxiosClient {
    constructor() {
        this.client = axios_1.default.create(defaultAxiosConfig);
    }
    handle(request, retries = 0) {
        return new Promise(async (resolve, reject) => {
            var _a;
            try {
                const axiosParams = this.transformToAxiosParams(request);
                const response = await this.client.request(axiosParams);
                const smashResponse = this.transformToSmashResponse(response);
                resolve(smashResponse);
            }
            catch (error) {
                if (!(error === null || error === void 0 ? void 0 : error.response) && (error === null || error === void 0 ? void 0 : error.request)) {
                    reject(new sdkError_1.NetworkError(error));
                }
                else if (request.bypassErrorHandler && error instanceof axios_1.AxiosError && (error === null || error === void 0 ? void 0 : error.response)) {
                    const smashResponse = this.transformToSmashResponse(error.response);
                    resolve(smashResponse);
                }
                else if ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) {
                    const smashResponse = this.transformToSmashResponse(error.response);
                    if (smashResponse.statusCode === 401 && request.refreshTokenMethod) {
                        try {
                            const token = await request.refreshTokenMethod(smashResponse, retries);
                            if (token) {
                                const newRequest = request;
                                newRequest.headers = { ...request.headers, Authorization: 'Bearer ' + token };
                                const newResponse = await this.handle(newRequest, ++retries);
                                resolve(newResponse);
                            }
                            else {
                                resolve(smashResponse);
                            }
                        }
                        catch (error) {
                            reject(error);
                        }
                    }
                    else {
                        resolve(smashResponse);
                    }
                }
                else {
                    reject(new sdkError_1.UnknownError(error));
                }
            }
        });
    }
    ;
    transformToSmashResponse(response) {
        var _a;
        if (((_a = response === null || response === void 0 ? void 0 : response.headers) === null || _a === void 0 ? void 0 : _a['content-type']) === 'application/xml' && typeof (response === null || response === void 0 ? void 0 : response.data) === 'string') {
            const parser = new fast_xml_parser_1.XMLParser();
            response.data = parser.parse(response.data);
        }
        return new types_1.HttpResponse({ ...response, body: response.data });
    }
    transformToAxiosParams(request) {
        return {
            method: request.method.toLowerCase(),
            url: request.getUrl(),
            headers: request.headers,
            data: request.bodyParameters,
            params: request.queryParameters,
            responseType: request.responseType === 'object' ? 'json' : 'stream',
            onUploadProgress: (event) => {
                if (request.onUploadProgress) {
                    const parsedEvent = {
                        uploadedBytes: event.loaded,
                        totalBytes: event.total,
                        timestamp: event.timeStamp,
                    };
                    request.onUploadProgress(parsedEvent);
                }
            },
        };
    }
}
exports.AxiosClient = AxiosClient;
