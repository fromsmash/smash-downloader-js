"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestTimeTooSkewedError = exports.RequestTimeoutError = exports.RequestHeaderSectionTooLargeError = exports.NotImplementedError = exports.NoSuchKeyError = exports.NoSuchCORSConfigurationError = exports.NoSuchBucketPolicyError = exports.NoSuchBucketError = exports.MissingSecurityHeaderError = exports.MissingRequestBodyError = exports.MissingContentLengthError = exports.MetadataTooLargeError = exports.MaxMessageLengthExceededError = exports.KeyTooLongError = exports.InvalidURIError = exports.InvalidTokenError = exports.InvalidSecurityError = exports.InvalidRequestError = exports.InvalidRangeError = exports.InvalidPolicyDocumentError = exports.InvalidPayerError = exports.InvalidPartOrderError = exports.InvalidPartError = exports.InvalidObjectStateError = exports.InvalidLocationConstraintError = exports.InvalidDigestError = exports.InvalidBucketStateError = exports.InvalidBucketNameError = exports.InvalidArgumentError = exports.InvalidAccessKeyIdError = exports.InternalError = exports.InlineDataTooLargeError = exports.IncompleteBodyError = exports.IllegalVersioningConfigurationExceptionError = exports.IllegalLocationConstraintExceptionError = exports.ExpiredTokenError = exports.EntityTooLargeError = exports.EntityTooSmallError = exports.BadDigestError = exports.AuthorizationHeaderMalformedError = exports.AmbiguousGrantByEmailAddressError = exports.AllAccessDisabledError = exports.AccountProblemError = exports.AccessPointAlreadyOwnedByYouError = exports.AccessDeniedError = exports.AccessControlListNotSupportedError = exports.NoSuchUploadError = exports.InternalServerError = exports.NotFoundError = exports.BadRequestError = void 0;
exports.UserKeyMustBeSpecifiedError = exports.UnexpectedContentError = exports.TokenRefreshRequiredError = exports.SlowDownError = exports.SignatureDoesNotMatchError = exports.ServiceUnavailableError = exports.ServerSideEncryptionConfigurationNotFoundError = void 0;
const core_1 = require("@smash-sdk/core");
class BadRequestError extends core_1.SDKError {
}
exports.BadRequestError = BadRequestError;
class NotFoundError extends core_1.SDKError {
}
exports.NotFoundError = NotFoundError;
class InternalServerError extends core_1.SDKError {
}
exports.InternalServerError = InternalServerError;
class NoSuchUploadError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.NoSuchUploadError = NoSuchUploadError;
class AccessControlListNotSupportedError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.AccessControlListNotSupportedError = AccessControlListNotSupportedError;
class AccessDeniedError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.AccessDeniedError = AccessDeniedError;
class AccessPointAlreadyOwnedByYouError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.AccessPointAlreadyOwnedByYouError = AccessPointAlreadyOwnedByYouError;
class AccountProblemError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.AccountProblemError = AccountProblemError;
class AllAccessDisabledError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.AllAccessDisabledError = AllAccessDisabledError;
class AmbiguousGrantByEmailAddressError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.AmbiguousGrantByEmailAddressError = AmbiguousGrantByEmailAddressError;
class AuthorizationHeaderMalformedError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.AuthorizationHeaderMalformedError = AuthorizationHeaderMalformedError;
class BadDigestError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.BadDigestError = BadDigestError;
class EntityTooSmallError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.EntityTooSmallError = EntityTooSmallError;
class EntityTooLargeError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.EntityTooLargeError = EntityTooLargeError;
class ExpiredTokenError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.ExpiredTokenError = ExpiredTokenError;
class IllegalLocationConstraintExceptionError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.IllegalLocationConstraintExceptionError = IllegalLocationConstraintExceptionError;
class IllegalVersioningConfigurationExceptionError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.IllegalVersioningConfigurationExceptionError = IllegalVersioningConfigurationExceptionError;
class IncompleteBodyError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.IncompleteBodyError = IncompleteBodyError;
class InlineDataTooLargeError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InlineDataTooLargeError = InlineDataTooLargeError;
class InternalError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InternalError = InternalError;
class InvalidAccessKeyIdError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidAccessKeyIdError = InvalidAccessKeyIdError;
class InvalidArgumentError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidArgumentError = InvalidArgumentError;
class InvalidBucketNameError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidBucketNameError = InvalidBucketNameError;
class InvalidBucketStateError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidBucketStateError = InvalidBucketStateError;
class InvalidDigestError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidDigestError = InvalidDigestError;
class InvalidLocationConstraintError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidLocationConstraintError = InvalidLocationConstraintError;
class InvalidObjectStateError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidObjectStateError = InvalidObjectStateError;
class InvalidPartError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidPartError = InvalidPartError;
class InvalidPartOrderError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidPartOrderError = InvalidPartOrderError;
class InvalidPayerError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidPayerError = InvalidPayerError;
class InvalidPolicyDocumentError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidPolicyDocumentError = InvalidPolicyDocumentError;
class InvalidRangeError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidRangeError = InvalidRangeError;
class InvalidRequestError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidRequestError = InvalidRequestError;
class InvalidSecurityError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidSecurityError = InvalidSecurityError;
class InvalidTokenError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidTokenError = InvalidTokenError;
class InvalidURIError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.InvalidURIError = InvalidURIError;
class KeyTooLongError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.KeyTooLongError = KeyTooLongError;
class MaxMessageLengthExceededError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.MaxMessageLengthExceededError = MaxMessageLengthExceededError;
class MetadataTooLargeError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.MetadataTooLargeError = MetadataTooLargeError;
class MissingContentLengthError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.MissingContentLengthError = MissingContentLengthError;
class MissingRequestBodyError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.MissingRequestBodyError = MissingRequestBodyError;
class MissingSecurityHeaderError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.MissingSecurityHeaderError = MissingSecurityHeaderError;
class NoSuchBucketError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.NoSuchBucketError = NoSuchBucketError;
class NoSuchBucketPolicyError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.NoSuchBucketPolicyError = NoSuchBucketPolicyError;
class NoSuchCORSConfigurationError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.NoSuchCORSConfigurationError = NoSuchCORSConfigurationError;
class NoSuchKeyError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.NoSuchKeyError = NoSuchKeyError;
class NotImplementedError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.NotImplementedError = NotImplementedError;
class RequestHeaderSectionTooLargeError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.RequestHeaderSectionTooLargeError = RequestHeaderSectionTooLargeError;
class RequestTimeoutError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.RequestTimeoutError = RequestTimeoutError;
class RequestTimeTooSkewedError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.RequestTimeTooSkewedError = RequestTimeTooSkewedError;
class ServerSideEncryptionConfigurationNotFoundError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.ServerSideEncryptionConfigurationNotFoundError = ServerSideEncryptionConfigurationNotFoundError;
class ServiceUnavailableError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.ServiceUnavailableError = ServiceUnavailableError;
class SignatureDoesNotMatchError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.SignatureDoesNotMatchError = SignatureDoesNotMatchError;
class SlowDownError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.SlowDownError = SlowDownError;
class TokenRefreshRequiredError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.TokenRefreshRequiredError = TokenRefreshRequiredError;
class UnexpectedContentError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.UnexpectedContentError = UnexpectedContentError;
class UserKeyMustBeSpecifiedError extends core_1.SDKError {
    constructor(error) {
        super(error.name);
        this.name = error.name;
        this.code = error.code;
        this.requestId = error.requestId;
        this.resource = error.resource;
        this.message = error.message;
    }
}
exports.UserKeyMustBeSpecifiedError = UserKeyMustBeSpecifiedError;
exports.default = {
    BadRequestError,
    InternalServerError,
    NotFoundError,
    NoSuchUploadError,
    AccessControlListNotSupportedError,
    AccessDeniedError,
    AccessPointAlreadyOwnedByYouError,
    AccountProblemError,
    AllAccessDisabledError,
    AmbiguousGrantByEmailAddressError,
    AuthorizationHeaderMalformedError,
    BadDigestError,
    EntityTooSmallError,
    EntityTooLargeError,
    ExpiredTokenError,
    IllegalLocationConstraintExceptionError,
    IllegalVersioningConfigurationExceptionError,
    IncompleteBodyError,
    InlineDataTooLargeError,
    InternalError,
    InvalidAccessKeyIdError,
    InvalidArgumentError,
    InvalidBucketNameError,
    InvalidBucketStateError,
    InvalidDigestError,
    InvalidLocationConstraintError,
    InvalidObjectStateError,
    InvalidPartError,
    InvalidPartOrderError,
    InvalidPayerError,
    InvalidPolicyDocumentError,
    InvalidRangeError,
    InvalidRequestError,
    InvalidSecurityError,
    InvalidTokenError,
    InvalidURIError,
    KeyTooLongError,
    MaxMessageLengthExceededError,
    MetadataTooLargeError,
    MissingContentLengthError,
    MissingRequestBodyError,
    MissingSecurityHeaderError,
    NoSuchBucketError,
    NoSuchBucketPolicyError,
    NoSuchCORSConfigurationError,
    NoSuchKeyError,
    NotImplementedError,
    RequestHeaderSectionTooLargeError,
    RequestTimeoutError,
    RequestTimeTooSkewedError,
    ServerSideEncryptionConfigurationNotFoundError,
    ServiceUnavailableError,
    SignatureDoesNotMatchError,
    SlowDownError,
    TokenRefreshRequiredError,
    UnexpectedContentError,
    UserKeyMustBeSpecifiedError,
};
//# sourceMappingURL=UploadTransferFilePartError.js.map