import { SDKError } from "@smash-sdk/core";
export declare class BadRequestError extends SDKError {
}
export declare class NotFoundError extends SDKError {
}
export declare class InternalServerError extends SDKError {
}
interface S3Error {
    name: string;
    code: number;
    requestId: string;
    message: string;
    resource?: string;
}
export declare class NoSuchUploadError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class AccessControlListNotSupportedError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class AccessDeniedError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class AccessPointAlreadyOwnedByYouError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class AccountProblemError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class AllAccessDisabledError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class AmbiguousGrantByEmailAddressError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class AuthorizationHeaderMalformedError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class BadDigestError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class EntityTooSmallError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class EntityTooLargeError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class ExpiredTokenError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class IllegalLocationConstraintExceptionError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class IllegalVersioningConfigurationExceptionError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class IncompleteBodyError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InlineDataTooLargeError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InternalError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidAccessKeyIdError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidArgumentError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidBucketNameError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidBucketStateError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidDigestError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidLocationConstraintError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidObjectStateError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidPartError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidPartOrderError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidPayerError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidPolicyDocumentError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidRangeError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidRequestError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidSecurityError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidTokenError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class InvalidURIError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class KeyTooLongError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class MaxMessageLengthExceededError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class MetadataTooLargeError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class MissingContentLengthError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class MissingRequestBodyError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class MissingSecurityHeaderError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class NoSuchBucketError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class NoSuchBucketPolicyError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class NoSuchCORSConfigurationError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class NoSuchKeyError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class NotImplementedError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class RequestHeaderSectionTooLargeError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class RequestTimeoutError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class RequestTimeTooSkewedError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class ServerSideEncryptionConfigurationNotFoundError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class ServiceUnavailableError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class SignatureDoesNotMatchError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class SlowDownError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class TokenRefreshRequiredError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class UnexpectedContentError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
export declare class UserKeyMustBeSpecifiedError extends SDKError {
    name: string;
    code: number;
    requestId: string;
    resource?: string;
    message: string;
    constructor(error: S3Error);
}
declare const _default: {
    BadRequestError: typeof BadRequestError;
    InternalServerError: typeof InternalServerError;
    NotFoundError: typeof NotFoundError;
    NoSuchUploadError: typeof NoSuchUploadError;
    AccessControlListNotSupportedError: typeof AccessControlListNotSupportedError;
    AccessDeniedError: typeof AccessDeniedError;
    AccessPointAlreadyOwnedByYouError: typeof AccessPointAlreadyOwnedByYouError;
    AccountProblemError: typeof AccountProblemError;
    AllAccessDisabledError: typeof AllAccessDisabledError;
    AmbiguousGrantByEmailAddressError: typeof AmbiguousGrantByEmailAddressError;
    AuthorizationHeaderMalformedError: typeof AuthorizationHeaderMalformedError;
    BadDigestError: typeof BadDigestError;
    EntityTooSmallError: typeof EntityTooSmallError;
    EntityTooLargeError: typeof EntityTooLargeError;
    ExpiredTokenError: typeof ExpiredTokenError;
    IllegalLocationConstraintExceptionError: typeof IllegalLocationConstraintExceptionError;
    IllegalVersioningConfigurationExceptionError: typeof IllegalVersioningConfigurationExceptionError;
    IncompleteBodyError: typeof IncompleteBodyError;
    InlineDataTooLargeError: typeof InlineDataTooLargeError;
    InternalError: typeof InternalError;
    InvalidAccessKeyIdError: typeof InvalidAccessKeyIdError;
    InvalidArgumentError: typeof InvalidArgumentError;
    InvalidBucketNameError: typeof InvalidBucketNameError;
    InvalidBucketStateError: typeof InvalidBucketStateError;
    InvalidDigestError: typeof InvalidDigestError;
    InvalidLocationConstraintError: typeof InvalidLocationConstraintError;
    InvalidObjectStateError: typeof InvalidObjectStateError;
    InvalidPartError: typeof InvalidPartError;
    InvalidPartOrderError: typeof InvalidPartOrderError;
    InvalidPayerError: typeof InvalidPayerError;
    InvalidPolicyDocumentError: typeof InvalidPolicyDocumentError;
    InvalidRangeError: typeof InvalidRangeError;
    InvalidRequestError: typeof InvalidRequestError;
    InvalidSecurityError: typeof InvalidSecurityError;
    InvalidTokenError: typeof InvalidTokenError;
    InvalidURIError: typeof InvalidURIError;
    KeyTooLongError: typeof KeyTooLongError;
    MaxMessageLengthExceededError: typeof MaxMessageLengthExceededError;
    MetadataTooLargeError: typeof MetadataTooLargeError;
    MissingContentLengthError: typeof MissingContentLengthError;
    MissingRequestBodyError: typeof MissingRequestBodyError;
    MissingSecurityHeaderError: typeof MissingSecurityHeaderError;
    NoSuchBucketError: typeof NoSuchBucketError;
    NoSuchBucketPolicyError: typeof NoSuchBucketPolicyError;
    NoSuchCORSConfigurationError: typeof NoSuchCORSConfigurationError;
    NoSuchKeyError: typeof NoSuchKeyError;
    NotImplementedError: typeof NotImplementedError;
    RequestHeaderSectionTooLargeError: typeof RequestHeaderSectionTooLargeError;
    RequestTimeoutError: typeof RequestTimeoutError;
    RequestTimeTooSkewedError: typeof RequestTimeTooSkewedError;
    ServerSideEncryptionConfigurationNotFoundError: typeof ServerSideEncryptionConfigurationNotFoundError;
    ServiceUnavailableError: typeof ServiceUnavailableError;
    SignatureDoesNotMatchError: typeof SignatureDoesNotMatchError;
    SlowDownError: typeof SlowDownError;
    TokenRefreshRequiredError: typeof TokenRefreshRequiredError;
    UnexpectedContentError: typeof UnexpectedContentError;
    UserKeyMustBeSpecifiedError: typeof UserKeyMustBeSpecifiedError;
};
export default _default;
