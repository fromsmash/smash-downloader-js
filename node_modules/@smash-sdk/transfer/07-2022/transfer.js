"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transfer = void 0;
const core_1 = require("@smash-sdk/core");
const core_2 = require("@smash-sdk/core");
const errors_1 = require("./errors");
__exportStar(require("./errors"), exports);
__exportStar(require("./types/ListTeamTransferEvents/ListTeamTransferEvents"), exports);
__exportStar(require("./types/ListTeamTransferFiles/ListTeamTransferFiles"), exports);
__exportStar(require("./types/ListTeamTransfers/ListTeamTransfers"), exports);
__exportStar(require("./types/ListTeamUserTransfers/ListTeamUserTransfers"), exports);
__exportStar(require("./types/ListTransferEvents/ListTransferEvents"), exports);
__exportStar(require("./types/ListTransferFiles/ListTransferFiles"), exports);
__exportStar(require("./types/ListTransferFilesPreview/ListTransferFilesPreview"), exports);
__exportStar(require("./types/ListTransfers/ListTransfers"), exports);
__exportStar(require("./types/ListUserTransferEvents/ListUserTransferEvents"), exports);
__exportStar(require("./types/ListUserTransferFiles/ListUserTransferFiles"), exports);
__exportStar(require("./types/ListUserTransfers/ListUserTransfers"), exports);
__exportStar(require("./types/LockTransfer/LockTransfer"), exports);
__exportStar(require("./types/UpdateTransfer/UpdateTransfer"), exports);
__exportStar(require("./types/UpdateTransferCustomization/UpdateTransferCustomization"), exports);
__exportStar(require("./types/UpdateTransferFile/UpdateTransferFile"), exports);
__exportStar(require("./types/UpdateTransferFilePart/UpdateTransferFilePart"), exports);
__exportStar(require("./types/UpdateTransferFileParts/UpdateTransferFileParts"), exports);
__exportStar(require("./types/CreateTeamTransfer/CreateTeamTransfer"), exports);
__exportStar(require("./types/CreateTransfer/CreateTransfer"), exports);
__exportStar(require("./types/CreateTransferFile/CreateTransferFile"), exports);
__exportStar(require("./types/CreateTransferFilePart/CreateTransferFilePart"), exports);
__exportStar(require("./types/CreateTransferFileParts/CreateTransferFileParts"), exports);
__exportStar(require("./types/CreateTransferSignedUrls/CreateTransferSignedUrls"), exports);
__exportStar(require("./types/DeleteReport/DeleteReport"), exports);
__exportStar(require("./types/DeleteTeamTransfer/DeleteTeamTransfer"), exports);
__exportStar(require("./types/DeleteTransfer/DeleteTransfer"), exports);
__exportStar(require("./types/DeleteTransferFile/DeleteTransferFile"), exports);
__exportStar(require("./types/DeleteUserTransfer/DeleteUserTransfer"), exports);
__exportStar(require("./types/GetMetricStatistic/GetMetricStatistic"), exports);
__exportStar(require("./types/GetReport/GetReport"), exports);
__exportStar(require("./types/GetTeamMetricStatistic/GetTeamMetricStatistic"), exports);
__exportStar(require("./types/GetTeamTransfer/GetTeamTransfer"), exports);
__exportStar(require("./types/GetTeamTransferFile/GetTeamTransferFile"), exports);
__exportStar(require("./types/GetTeamTransferQueue/GetTeamTransferQueue"), exports);
__exportStar(require("./types/GetTeamUserMetricStatistic/GetTeamUserMetricStatistic"), exports);
__exportStar(require("./types/GetTransfer/GetTransfer"), exports);
__exportStar(require("./types/GetTransferFile/GetTransferFile"), exports);
__exportStar(require("./types/GetTransferFilePreview/GetTransferFilePreview"), exports);
__exportStar(require("./types/GetTransferPreview/GetTransferPreview"), exports);
__exportStar(require("./types/GetTransferQueue/GetTransferQueue"), exports);
__exportStar(require("./types/GetUserMetricStatistic/GetUserMetricStatistic"), exports);
__exportStar(require("./types/GetUserTransfer/GetUserTransfer"), exports);
__exportStar(require("./types/GetUserTransferFile/GetUserTransferFile"), exports);
const endpoints = {
    "ca-central-1": "https://transfer.ca-central-1.fromsmash.co",
    "eu-central-1": "https://transfer.eu-central-1.fromsmash.co",
    "eu-west-1": "https://transfer.eu-west-1.fromsmash.co",
    "eu-west-2": "https://transfer.eu-west-2.fromsmash.co",
    "eu-west-3": "https://transfer.eu-west-3.fromsmash.co",
    "us-east-1": "https://transfer.us-east-1.fromsmash.co",
    "us-east-2": "https://transfer.us-east-2.fromsmash.co",
    "us-west-1": "https://transfer.us-west-1.fromsmash.co",
    "us-west-2": "https://transfer.us-west-2.fromsmash.co",
};
core_2.config.setHosts("transfer", endpoints);
class Transfer extends core_1.Client {
    constructor(params) {
        super(Object.assign({ service: "transfer" }, params));
        this.errors = errors_1.errors;
    }
    listTeamTransferEvents(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/team/:teamId/transfer/:transferId/events",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                        teamId: params.teamId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListTeamTransferEventsError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listTeamTransferFiles(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/team/:teamId/transfer/:transferId/files",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListTeamTransferFilesError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listTeamTransfers(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/team/:teamId/transfers",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListTeamTransfersError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listTeamUserTransfers(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/team/:teamId/user/:userId/transfers",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                        userId: params.userId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListTeamUserTransfersError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listTransferEvents(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/transfer/:transferId/events",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListTransferEventsError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listTransferFiles(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/transfer/:transferId/files",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListTransferFilesError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listTransferFilesPreview(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/transfer/:transferId/files/preview",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        limit: params.limit,
                        start: params.start,
                        sort: params.sort,
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListTransferFilesPreviewError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listTransfers(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/transfers",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {},
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListTransfersError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listUserTransferEvents(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/user/:userId/transfer/:transferId/events",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        userId: params.userId,
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListUserTransferEventsError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listUserTransferFiles(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/user/:userId/transfer/:transferId/files",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        userId: params.userId,
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListUserTransferFilesError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    listUserTransfers(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/user/:userId/transfers",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        userId: params.userId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.ListUserTransfersError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    lockTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "PUT",
                    path: "/transfer/:transferId/lock",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.LockTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    updateTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "PUT",
                    path: "/transfer/:transferId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        size: params.size,
                        filesNumber: params.filesNumber,
                        language: params.language,
                        availabilityDuration: params.availabilityDuration,
                        title: params.title,
                        delivery: params.delivery,
                        customization: params.customization,
                        promotion: params.promotion,
                        preview: params.preview,
                        password: params.password,
                        notificationType: params.notificationType,
                        description: params.description,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.UpdateTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    updateTransferCustomization(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "PUT",
                    path: "/transfer/:transferId/customization",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        customization: params.customization,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.UpdateTransferCustomizationError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    updateTransferFile(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "PUT",
                    path: "/transfer/:transferId/file/:fileId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                        fileId: params.fileId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        parts: params.parts,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.UpdateTransferFileError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    updateTransferFilePart(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "PUT",
                    path: "/transfer/:transferId/file/:fileId/part/:partId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                        fileId: params.fileId,
                        partId: params.partId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        etag: params.etag,
                        crc32: params.crc32,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.UpdateTransferFilePartError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    updateTransferFileParts(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "PUT",
                    path: "/transfer/:transferId/file/:fileId/parts",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                        fileId: params.fileId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        parts: params.parts,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.UpdateTransferFilePartsError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    createTeamTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "POST",
                    path: "/team/:teamId/transfer",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        size: params.size,
                        filesNumber: params.filesNumber,
                        domain: params.domain,
                        customUrl: params.customUrl,
                        language: params.language,
                        availabilityDuration: params.availabilityDuration,
                        title: params.title,
                        delivery: params.delivery,
                        customization: params.customization,
                        promotion: params.promotion,
                        preview: params.preview,
                        accessTracking: params.accessTracking,
                        password: params.password,
                        notificationType: params.notificationType,
                        description: params.description,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.CreateTeamTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    createTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "POST",
                    path: "/transfer",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {},
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        size: params.size,
                        filesNumber: params.filesNumber,
                        domain: params.domain,
                        customUrl: params.customUrl,
                        language: params.language,
                        availabilityDuration: params.availabilityDuration,
                        title: params.title,
                        delivery: params.delivery,
                        customization: params.customization,
                        promotion: params.promotion,
                        preview: params.preview,
                        accessTracking: params.accessTracking,
                        password: params.password,
                        notificationType: params.notificationType,
                        description: params.description,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.CreateTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    createTransferFile(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "POST",
                    path: "/transfer/:transferId/file",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        name: params.name,
                        size: params.size,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.CreateTransferFileError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    createTransferFilePart(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "POST",
                    path: "/transfer/:transferId/file/:fileId/part",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                        fileId: params.fileId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        id: params.id,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.CreateTransferFilePartError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    createTransferFileParts(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "POST",
                    path: "/transfer/:transferId/file/:fileId/parts",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                        fileId: params.fileId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    bodyParameters: {
                        parts: params.parts,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.CreateTransferFilePartsError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    createTransferSignedUrls(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "PUT",
                    path: "/transfer/:transferId/urls",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        e: params.e,
                        version: "07-2022",
                    },
                    bodyParameters: {
                        files: params.files,
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.CreateTransferSignedUrlsError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    deleteReport(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "DELETE",
                    path: "/report/:reportId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        reportId: params.reportId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.DeleteReportError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    deleteTeamTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "DELETE",
                    path: "/team/:teamId/transfer/:transferId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.DeleteTeamTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    deleteTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "DELETE",
                    path: "/transfer/:transferId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.DeleteTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    deleteTransferFile(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "DELETE",
                    path: "/transfer/:transferId/file/:fileId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                        fileId: params.fileId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.DeleteTransferFileError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    deleteUserTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "DELETE",
                    path: "/user/:userId/transfer/:transferId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        userId: params.userId,
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.DeleteUserTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getMetricStatistic(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/metric/:metricName/statistic/:statisticName",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        metricName: params.metricName,
                        statisticName: params.statisticName,
                    },
                    queryParameters: {
                        startDate: params.startDate,
                        endDate: params.endDate,
                        unit: params.unit,
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetMetricStatisticError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getReport(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/report/:reportId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        reportId: params.reportId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetReportError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTeamMetricStatistic(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/team/:teamId/metric/:metricName/statistic/:statisticName",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                        metricName: params.metricName,
                        statisticName: params.statisticName,
                    },
                    queryParameters: {
                        startDate: params.startDate,
                        endDate: params.endDate,
                        unit: params.unit,
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTeamMetricStatisticError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTeamTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/team/:teamId/transfer/:transferId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTeamTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTeamTransferFile(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/team/:teamId/transfer/:transferId/file/:fileId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                        transferId: params.transferId,
                        fileId: params.fileId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTeamTransferFileError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTeamTransferQueue(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/team/:teamId/transfer/queue",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                    },
                    queryParameters: {
                        size: params.size,
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTeamTransferQueueError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTeamUserMetricStatistic(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/team/:teamId/user/:userId/metric/:metricName/statistic/:statisticName",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        teamId: params.teamId,
                        userId: params.userId,
                        metricName: params.metricName,
                        statisticName: params.statisticName,
                    },
                    queryParameters: {
                        startDate: params.startDate,
                        endDate: params.endDate,
                        unit: params.unit,
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTeamUserMetricStatisticError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/transfer/:transferId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTransferFile(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/transfer/:transferId/file/:fileId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                        fileId: params.fileId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTransferFileError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTransferFilePreview(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/transfer/:transferId/file/:fileId/preview",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                        fileId: params.fileId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTransferFilePreviewError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTransferPreview(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/transfer/:transferId/preview",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        e: params.e,
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTransferPreviewError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getTransferQueue(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/transfer/queue",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {},
                    queryParameters: {
                        size: params.size,
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetTransferQueueError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getUserMetricStatistic(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/user/:userId/metric/:metricName/statistic/:statisticName",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        userId: params.userId,
                        metricName: params.metricName,
                        statisticName: params.statisticName,
                    },
                    queryParameters: {
                        startDate: params.startDate,
                        endDate: params.endDate,
                        unit: params.unit,
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetUserMetricStatisticError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getUserTransfer(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/user/:userId/transfer/:transferId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        userId: params.userId,
                        transferId: params.transferId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetUserTransferError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
    getUserTransferFile(params) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                const requestParams = {
                    host: this.host,
                    method: "GET",
                    path: "/user/:userId/transfer/:transferId/file/:fileId",
                    headers: {
                        Authorization: "Bearer " + this.token,
                    },
                    pathParameters: {
                        userId: params.userId,
                        transferId: params.transferId,
                        fileId: params.fileId,
                    },
                    queryParameters: {
                        version: "07-2022",
                    },
                    refreshTokenMethod: this.refreshTokenMethod,
                };
                const request = new core_2.HttpRequest(requestParams);
                const response = yield this.client.handle(request);
                const parsedResponse = this.parseResponse(response, this.errors.GetUserTransferFileError);
                resolve(parsedResponse);
            }
            catch (error) {
                if (error instanceof Error) {
                    if (error instanceof core_2.SDKError) {
                        reject(error);
                    }
                    else {
                        reject(new core_2.SDKError(error));
                    }
                }
                else {
                    reject(new core_2.SDKError(error));
                }
            }
        }));
    }
}
exports.Transfer = Transfer;
//# sourceMappingURL=transfer.js.map